// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: em/market/v1/market.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TimeInForce int32

const (
	TimeInForce_Unspecified       TimeInForce = 0
	TimeInForce_GoodTillCancel    TimeInForce = 1
	TimeInForce_ImmediateOrCancel TimeInForce = 2
	TimeInForce_FillOrKill        TimeInForce = 3
)

var TimeInForce_name = map[int32]string{
	0: "TIME_IN_FORCE_UNSPECIFIED",
	1: "TIME_IN_FORCE_GOOD_TILL_CANCEL",
	2: "TIME_IN_FORCE_IMMEDIATE_OR_CANCEL",
	3: "TIME_IN_FORCE_FILL_OR_KILL",
}

var TimeInForce_value = map[string]int32{
	"TIME_IN_FORCE_UNSPECIFIED":         0,
	"TIME_IN_FORCE_GOOD_TILL_CANCEL":    1,
	"TIME_IN_FORCE_IMMEDIATE_OR_CANCEL": 2,
	"TIME_IN_FORCE_FILL_OR_KILL":        3,
}

func (x TimeInForce) String() string {
	return proto.EnumName(TimeInForce_name, int32(x))
}

func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_888ec7fc0f7580e2, []int{0}
}

type Instrument struct {
	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_888ec7fc0f7580e2, []int{0}
}
func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(m, src)
}
func (m *Instrument) XXX_Size() int {
	return m.Size()
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Instrument) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type Order struct {
	ID                uint64                                 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" yaml:"order_id"`
	TimeInForce       TimeInForce                            `protobuf:"varint,2,opt,name=time_in_force,json=timeInForce,proto3,enum=em.market.v1.TimeInForce" json:"time_in_force,omitempty" yaml:"time_in_force"`
	Owner             string                                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ClientOrderID     string                                 `protobuf:"bytes,4,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty" yaml:"client_order_id"`
	Source            types.Coin                             `protobuf:"bytes,5,opt,name=source,proto3" json:"source" yaml:"source"`
	SourceRemaining   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=source_remaining,json=sourceRemaining,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"source_remaining" yaml:"source_remaining"`
	SourceFilled      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=source_filled,json=sourceFilled,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"source_filled" yaml:"source_filled"`
	Destination       types.Coin                             `protobuf:"bytes,8,opt,name=destination,proto3" json:"destination" yaml:"destination"`
	DestinationFilled github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=destination_filled,json=destinationFilled,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"destination_filled" yaml:"destination_filled"`
	Created           time.Time                              `protobuf:"bytes,10,opt,name=created,proto3,stdtime" json:"created" yaml:"created"`
}

func (m *Order) Reset()      { *m = Order{} }
func (*Order) ProtoMessage() {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_888ec7fc0f7580e2, []int{1}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Order) GetTimeInForce() TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForce_Unspecified
}

func (m *Order) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Order) GetClientOrderID() string {
	if m != nil {
		return m.ClientOrderID
	}
	return ""
}

func (m *Order) GetSource() types.Coin {
	if m != nil {
		return m.Source
	}
	return types.Coin{}
}

func (m *Order) GetDestination() types.Coin {
	if m != nil {
		return m.Destination
	}
	return types.Coin{}
}

func (m *Order) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type ExecutionPlan struct {
	Price       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	FirstOrder  *Order                                 `protobuf:"bytes,2,opt,name=first_order,json=firstOrder,proto3" json:"first_order,omitempty"`
	SecondOrder *Order                                 `protobuf:"bytes,3,opt,name=second_order,json=secondOrder,proto3" json:"second_order,omitempty"`
}

func (m *ExecutionPlan) Reset()      { *m = ExecutionPlan{} }
func (*ExecutionPlan) ProtoMessage() {}
func (*ExecutionPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_888ec7fc0f7580e2, []int{2}
}
func (m *ExecutionPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionPlan.Merge(m, src)
}
func (m *ExecutionPlan) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionPlan.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionPlan proto.InternalMessageInfo

func (m *ExecutionPlan) GetFirstOrder() *Order {
	if m != nil {
		return m.FirstOrder
	}
	return nil
}

func (m *ExecutionPlan) GetSecondOrder() *Order {
	if m != nil {
		return m.SecondOrder
	}
	return nil
}

type MarketData struct {
	Source      string                                  `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string                                  `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	LastPrice   *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=last_price,json=lastPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_price,omitempty"`
	Timestamp   *time.Time                              `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
}

func (m *MarketData) Reset()         { *m = MarketData{} }
func (m *MarketData) String() string { return proto.CompactTextString(m) }
func (*MarketData) ProtoMessage()    {}
func (*MarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_888ec7fc0f7580e2, []int{3}
}
func (m *MarketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketData.Merge(m, src)
}
func (m *MarketData) XXX_Size() int {
	return m.Size()
}
func (m *MarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketData.DiscardUnknown(m)
}

var xxx_messageInfo_MarketData proto.InternalMessageInfo

func (m *MarketData) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MarketData) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *MarketData) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterEnum("em.market.v1.TimeInForce", TimeInForce_name, TimeInForce_value)
	proto.RegisterType((*Instrument)(nil), "em.market.v1.Instrument")
	proto.RegisterType((*Order)(nil), "em.market.v1.Order")
	proto.RegisterType((*ExecutionPlan)(nil), "em.market.v1.ExecutionPlan")
	proto.RegisterType((*MarketData)(nil), "em.market.v1.MarketData")
}

func init() { proto.RegisterFile("em/market/v1/market.proto", fileDescriptor_888ec7fc0f7580e2) }

var fileDescriptor_888ec7fc0f7580e2 = []byte{
	// 896 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x3f, 0x6f, 0xdb, 0x46,
	0x14, 0x17, 0x6d, 0xd9, 0x8e, 0x4f, 0x96, 0xad, 0x5c, 0x9d, 0x54, 0xe2, 0x40, 0xaa, 0x1c, 0x82,
	0x20, 0x81, 0x49, 0xd8, 0x0d, 0x32, 0x04, 0x45, 0x81, 0x48, 0xa2, 0x52, 0xc2, 0xb2, 0x65, 0x30,
	0x0a, 0x02, 0x74, 0x21, 0x28, 0xf2, 0xa4, 0x1e, 0x4c, 0xde, 0x09, 0xe4, 0xc9, 0x8d, 0xfb, 0x11,
	0x3c, 0x65, 0xec, 0x62, 0xa0, 0x43, 0x87, 0x7e, 0x94, 0x74, 0x73, 0xb7, 0xa2, 0x03, 0x5b, 0xc8,
	0x53, 0x87, 0x2e, 0xfa, 0x04, 0x05, 0xef, 0x28, 0x99, 0x6c, 0xd1, 0x16, 0xea, 0xa4, 0x7b, 0x7f,
	0x7e, 0xef, 0xbd, 0xdf, 0xfb, 0x43, 0x81, 0x06, 0x0a, 0x8d, 0xd0, 0x8d, 0xce, 0x11, 0x33, 0x2e,
	0x0e, 0xb3, 0x97, 0x3e, 0x89, 0x28, 0xa3, 0x70, 0x07, 0x85, 0x7a, 0xa6, 0xb8, 0x38, 0x94, 0xf7,
	0xc7, 0x74, 0x4c, 0xb9, 0xc1, 0x48, 0x5f, 0xc2, 0x47, 0x56, 0xc7, 0x94, 0x8e, 0x03, 0x64, 0x70,
	0x69, 0x38, 0x1d, 0x19, 0x0c, 0x87, 0x28, 0x66, 0x6e, 0x38, 0xc9, 0x1c, 0x14, 0x8f, 0xc6, 0x21,
	0x8d, 0x8d, 0xa1, 0x1b, 0x23, 0xe3, 0xe2, 0x70, 0x88, 0x98, 0x7b, 0x68, 0x78, 0x14, 0x13, 0x61,
	0xd7, 0xba, 0x00, 0x58, 0x24, 0x66, 0xd1, 0x34, 0x44, 0x84, 0xc1, 0x87, 0x60, 0x33, 0xa6, 0xd3,
	0xc8, 0x43, 0x75, 0xa9, 0x29, 0x3d, 0xde, 0xb6, 0x33, 0x09, 0x36, 0x41, 0xc5, 0x47, 0x31, 0xc3,
	0xc4, 0x65, 0x98, 0x92, 0xfa, 0x1a, 0x37, 0xe6, 0x55, 0xda, 0x1f, 0x9b, 0x60, 0xa3, 0x1f, 0xf9,
	0x28, 0x82, 0xcf, 0xc0, 0x3d, 0x9a, 0x3e, 0x1c, 0xec, 0xf3, 0x28, 0xe5, 0x56, 0x63, 0x96, 0xa8,
	0x6b, 0x56, 0x67, 0x9e, 0xa8, 0x7b, 0x97, 0x6e, 0x18, 0xbc, 0xd0, 0x16, 0x76, 0xcd, 0xde, 0xe2,
	0x4f, 0xcb, 0x87, 0x6f, 0x41, 0x35, 0x2d, 0xdd, 0xc1, 0xc4, 0x19, 0xd1, 0xb4, 0x80, 0x34, 0xc7,
	0xee, 0x51, 0x43, 0xcf, 0x37, 0x41, 0x1f, 0xe0, 0x10, 0x59, 0xa4, 0x9b, 0x3a, 0xb4, 0xea, 0xf3,
	0x44, 0xdd, 0x17, 0xf1, 0x0a, 0x48, 0xcd, 0xae, 0xb0, 0x3b, 0x37, 0xf8, 0x08, 0x6c, 0xd0, 0xaf,
	0x09, 0x8a, 0xea, 0xeb, 0x69, 0xd1, 0xad, 0xda, 0x3c, 0x51, 0x77, 0xb2, 0x2a, 0x52, 0xb5, 0x66,
	0x0b, 0x33, 0x7c, 0x0d, 0xf6, 0xbc, 0x00, 0x23, 0xc2, 0x9c, 0x65, 0xf5, 0x65, 0x8e, 0x78, 0x3a,
	0x4b, 0xd4, 0x6a, 0x9b, 0x9b, 0x38, 0x41, 0x4e, 0xe4, 0xa1, 0x08, 0xf1, 0x17, 0x84, 0x66, 0x57,
	0xbd, 0x9c, 0xa3, 0x0f, 0xbf, 0x58, 0xf6, 0x73, 0xa3, 0x29, 0x3d, 0xae, 0x1c, 0x35, 0x74, 0x31,
	0x0e, 0x3d, 0x1d, 0x87, 0x9e, 0x8d, 0x43, 0x6f, 0x53, 0x4c, 0x5a, 0x0f, 0x3e, 0x24, 0x6a, 0x69,
	0x9e, 0xa8, 0x55, 0x11, 0x59, 0xc0, 0xb4, 0xe5, 0x04, 0x18, 0xa8, 0x89, 0x97, 0x13, 0xa1, 0xd0,
	0xc5, 0x04, 0x93, 0x71, 0x7d, 0x93, 0xd7, 0x67, 0xa5, 0xc0, 0x5f, 0x12, 0xf5, 0xd1, 0x18, 0xb3,
	0xaf, 0xa6, 0x43, 0xdd, 0xa3, 0xa1, 0x91, 0x0d, 0x5d, 0xfc, 0x1c, 0xc4, 0xfe, 0xb9, 0xc1, 0x2e,
	0x27, 0x28, 0xd6, 0x2d, 0xc2, 0xe6, 0x89, 0xfa, 0x71, 0x3e, 0xc5, 0x5d, 0x3c, 0xcd, 0xde, 0x13,
	0x2a, 0x7b, 0xa1, 0x81, 0xe7, 0xa0, 0x9a, 0x79, 0x8d, 0x70, 0x10, 0x20, 0xbf, 0xbe, 0xc5, 0x53,
	0x76, 0x57, 0x4e, 0xb9, 0x5f, 0x48, 0x29, 0x82, 0x69, 0xf6, 0x8e, 0x90, 0xbb, 0x5c, 0x84, 0x6f,
	0x8b, 0x4b, 0x76, 0xef, 0xbf, 0x3a, 0x26, 0x67, 0x1d, 0x83, 0x22, 0x76, 0x7e, 0x1b, 0x0b, 0xbb,
	0x09, 0xbf, 0x01, 0x30, 0x27, 0x2e, 0xa8, 0x6c, 0x73, 0x2a, 0xc7, 0x2b, 0x53, 0x69, 0xfc, 0x2d,
	0xdd, 0x92, 0xcf, 0xfd, 0x9c, 0x32, 0x23, 0x75, 0x06, 0xb6, 0xbc, 0x08, 0xb9, 0x0c, 0xf9, 0x75,
	0xc0, 0x09, 0xc9, 0xba, 0x38, 0x59, 0x7d, 0x71, 0xb2, 0x7c, 0xa9, 0xf9, 0xc9, 0x2e, 0x19, 0xed,
	0x66, 0xdb, 0x25, 0x80, 0xda, 0xfb, 0x5f, 0x55, 0xc9, 0x5e, 0x84, 0x79, 0x51, 0xfe, 0xf6, 0x3b,
	0xb5, 0xa4, 0xfd, 0x28, 0x81, 0xaa, 0xf9, 0x0e, 0x79, 0xd3, 0x34, 0xd7, 0x59, 0xe0, 0x12, 0xd8,
	0x01, 0x1b, 0x93, 0x08, 0x2f, 0x4e, 0xb7, 0xa5, 0xaf, 0x40, 0xac, 0x83, 0x3c, 0x5b, 0x80, 0xe1,
	0x33, 0x50, 0x19, 0xe1, 0x28, 0xce, 0x76, 0x9a, 0x5f, 0x61, 0xe5, 0xe8, 0xa3, 0xe2, 0x15, 0xf2,
	0xed, 0xb6, 0x01, 0xf7, 0x13, 0x37, 0xff, 0x1c, 0xec, 0xc4, 0xc8, 0xa3, 0xc4, 0xcf, 0x60, 0xeb,
	0xff, 0x0c, 0xab, 0x08, 0x47, 0x2e, 0x64, 0x5c, 0x7e, 0x92, 0x00, 0x38, 0xe1, 0x6e, 0x1d, 0x97,
	0xb9, 0xff, 0xff, 0x23, 0x04, 0x2d, 0x00, 0x02, 0x37, 0x66, 0x8e, 0xe8, 0x83, 0x38, 0xf8, 0x27,
	0x2b, 0xf4, 0x60, 0x3b, 0x45, 0x9f, 0xf1, 0x3e, 0x7c, 0x0e, 0xb6, 0x97, 0x9f, 0x52, 0xfe, 0x21,
	0xf8, 0xf7, 0xc9, 0x95, 0xf9, 0x8c, 0xee, 0x20, 0x4f, 0x7e, 0x97, 0x40, 0x25, 0xf7, 0xb5, 0x82,
	0x3a, 0x68, 0x0c, 0xac, 0x13, 0xd3, 0xb1, 0x4e, 0x9d, 0x6e, 0xdf, 0x6e, 0x9b, 0xce, 0x9b, 0xd3,
	0xd7, 0x67, 0x66, 0xdb, 0xea, 0x5a, 0x66, 0xa7, 0x56, 0x92, 0xf7, 0xae, 0xae, 0x9b, 0x95, 0x37,
	0x24, 0x9e, 0x20, 0x0f, 0x8f, 0x30, 0xf2, 0xe1, 0x73, 0xa0, 0x14, 0xfd, 0x5f, 0xf5, 0xfb, 0x1d,
	0x67, 0x60, 0xf5, 0x7a, 0x4e, 0xfb, 0xe5, 0x69, 0xdb, 0xec, 0xd5, 0x24, 0x19, 0x5e, 0x5d, 0x37,
	0x77, 0x5f, 0x51, 0xea, 0x0f, 0x70, 0x10, 0xb4, 0x5d, 0xe2, 0xa1, 0x00, 0x7e, 0x06, 0x3e, 0x29,
	0xe2, 0xac, 0x93, 0x13, 0xb3, 0x63, 0xbd, 0x1c, 0x98, 0x4e, 0xdf, 0x5e, 0x40, 0xd7, 0xe4, 0x07,
	0x57, 0xd7, 0xcd, 0xfb, 0x56, 0x18, 0x22, 0x1f, 0xbb, 0x0c, 0xf5, 0xa3, 0x0c, 0xad, 0x03, 0xb9,
	0x88, 0xee, 0xa6, 0x09, 0xfb, 0xb6, 0x73, 0x6c, 0xf5, 0x7a, 0xb5, 0x75, 0x79, 0xf7, 0xea, 0xba,
	0x09, 0xd2, 0xcd, 0xee, 0x47, 0xc7, 0x38, 0x08, 0xe4, 0xf2, 0x0f, 0xdf, 0x2b, 0x52, 0xcb, 0xfc,
	0x30, 0x53, 0xa4, 0x9b, 0x99, 0x22, 0xfd, 0x36, 0x53, 0xa4, 0xf7, 0xb7, 0x4a, 0xe9, 0xe6, 0x56,
	0x29, 0xfd, 0x7c, 0xab, 0x94, 0xbe, 0x7c, 0x9a, 0x6b, 0x3c, 0x3a, 0x08, 0x29, 0x41, 0x97, 0x06,
	0x0a, 0x0f, 0x02, 0xe4, 0x8f, 0x51, 0x64, 0xbc, 0x5b, 0xfc, 0xf3, 0xf1, 0x09, 0x0c, 0x37, 0x79,
	0x5f, 0x3f, 0xfd, 0x33, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x22, 0xa6, 0x88, 0x13, 0x07, 0x00, 0x00,
}

func (m *Instrument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Instrument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Instrument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMarket(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	{
		size := m.DestinationFilled.Size()
		i -= size
		if _, err := m.DestinationFilled.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.SourceFilled.Size()
		i -= size
		if _, err := m.SourceFilled.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.SourceRemaining.Size()
		i -= size
		if _, err := m.SourceRemaining.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ClientOrderID) > 0 {
		i -= len(m.ClientOrderID)
		copy(dAtA[i:], m.ClientOrderID)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.ClientOrderID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TimeInForce != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecondOrder != nil {
		{
			size, err := m.SecondOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FirstOrder != nil {
		{
			size, err := m.FirstOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MarketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintMarket(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x22
	}
	if m.LastPrice != nil {
		{
			size := m.LastPrice.Size()
			i -= size
			if _, err := m.LastPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Instrument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMarket(uint64(m.ID))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovMarket(uint64(m.TimeInForce))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.ClientOrderID)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.Source.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.SourceRemaining.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.SourceFilled.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.Destination.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DestinationFilled.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *ExecutionPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.FirstOrder != nil {
		l = m.FirstOrder.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.SecondOrder != nil {
		l = m.SecondOrder.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *MarketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.LastPrice != nil {
		l = m.LastPrice.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Timestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Instrument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instrument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instrument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= TimeInForce(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceRemaining.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceFilled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceFilled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationFilled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestinationFilled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstOrder == nil {
				m.FirstOrder = &Order{}
			}
			if err := m.FirstOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecondOrder == nil {
				m.SecondOrder = &Order{}
			}
			if err := m.SecondOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.LastPrice = &v
			if err := m.LastPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
