// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: em/market/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddLimitOrder struct {
	Owner         string      `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ClientOrderId string      `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty" yaml:"client_order_id"`
	TimeInForce   TimeInForce `protobuf:"varint,3,opt,name=time_in_force,json=timeInForce,proto3,enum=em.market.v1.TimeInForce" json:"time_in_force,omitempty" yaml:"time_in_force"`
	Source        types.Coin  `protobuf:"bytes,4,opt,name=source,proto3" json:"source" yaml:"source"`
	Destination   types.Coin  `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination" yaml:"destination"`
}

func (m *MsgAddLimitOrder) Reset()         { *m = MsgAddLimitOrder{} }
func (m *MsgAddLimitOrder) String() string { return proto.CompactTextString(m) }
func (*MsgAddLimitOrder) ProtoMessage()    {}
func (*MsgAddLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{0}
}
func (m *MsgAddLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLimitOrder.Merge(m, src)
}
func (m *MsgAddLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLimitOrder proto.InternalMessageInfo

func (m *MsgAddLimitOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAddLimitOrder) GetClientOrderId() string {
	if m != nil {
		return m.ClientOrderId
	}
	return ""
}

func (m *MsgAddLimitOrder) GetTimeInForce() TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForce_Unspecified
}

func (m *MsgAddLimitOrder) GetSource() types.Coin {
	if m != nil {
		return m.Source
	}
	return types.Coin{}
}

func (m *MsgAddLimitOrder) GetDestination() types.Coin {
	if m != nil {
		return m.Destination
	}
	return types.Coin{}
}

type MsgAddLimitOrderResponse struct {
}

func (m *MsgAddLimitOrderResponse) Reset()         { *m = MsgAddLimitOrderResponse{} }
func (m *MsgAddLimitOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddLimitOrderResponse) ProtoMessage()    {}
func (*MsgAddLimitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{1}
}
func (m *MsgAddLimitOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLimitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLimitOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLimitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLimitOrderResponse.Merge(m, src)
}
func (m *MsgAddLimitOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLimitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLimitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLimitOrderResponse proto.InternalMessageInfo

type MsgAddMarketOrder struct {
	Owner         string                                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ClientOrderId string                                 `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty" yaml:"client_order_id"`
	TimeInForce   TimeInForce                            `protobuf:"varint,3,opt,name=time_in_force,json=timeInForce,proto3,enum=em.market.v1.TimeInForce" json:"time_in_force,omitempty" yaml:"time_in_force"`
	Source        string                                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty" yaml:"source"`
	Destination   types.Coin                             `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination" yaml:"destination"`
	MaxSlippage   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=maximum_slippage,json=maximumSlippage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maximum_slippage" yaml:"maximum_slippage"`
}

func (m *MsgAddMarketOrder) Reset()         { *m = MsgAddMarketOrder{} }
func (m *MsgAddMarketOrder) String() string { return proto.CompactTextString(m) }
func (*MsgAddMarketOrder) ProtoMessage()    {}
func (*MsgAddMarketOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{2}
}
func (m *MsgAddMarketOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMarketOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMarketOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMarketOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMarketOrder.Merge(m, src)
}
func (m *MsgAddMarketOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMarketOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMarketOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMarketOrder proto.InternalMessageInfo

func (m *MsgAddMarketOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAddMarketOrder) GetClientOrderId() string {
	if m != nil {
		return m.ClientOrderId
	}
	return ""
}

func (m *MsgAddMarketOrder) GetTimeInForce() TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForce_Unspecified
}

func (m *MsgAddMarketOrder) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MsgAddMarketOrder) GetDestination() types.Coin {
	if m != nil {
		return m.Destination
	}
	return types.Coin{}
}

type MsgAddMarketOrderResponse struct {
}

func (m *MsgAddMarketOrderResponse) Reset()         { *m = MsgAddMarketOrderResponse{} }
func (m *MsgAddMarketOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMarketOrderResponse) ProtoMessage()    {}
func (*MsgAddMarketOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{3}
}
func (m *MsgAddMarketOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMarketOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMarketOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMarketOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMarketOrderResponse.Merge(m, src)
}
func (m *MsgAddMarketOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMarketOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMarketOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMarketOrderResponse proto.InternalMessageInfo

type MsgCancelOrder struct {
	Owner         string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ClientOrderId string `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty" yaml:"client_order_id"`
}

func (m *MsgCancelOrder) Reset()         { *m = MsgCancelOrder{} }
func (m *MsgCancelOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOrder) ProtoMessage()    {}
func (*MsgCancelOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{4}
}
func (m *MsgCancelOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOrder.Merge(m, src)
}
func (m *MsgCancelOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOrder proto.InternalMessageInfo

func (m *MsgCancelOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCancelOrder) GetClientOrderId() string {
	if m != nil {
		return m.ClientOrderId
	}
	return ""
}

type MsgCancelOrderResponse struct {
}

func (m *MsgCancelOrderResponse) Reset()         { *m = MsgCancelOrderResponse{} }
func (m *MsgCancelOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOrderResponse) ProtoMessage()    {}
func (*MsgCancelOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{5}
}
func (m *MsgCancelOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOrderResponse.Merge(m, src)
}
func (m *MsgCancelOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOrderResponse proto.InternalMessageInfo

type MsgCancelReplaceLimitOrder struct {
	Owner             string      `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	OrigClientOrderId string      `protobuf:"bytes,2,opt,name=original_client_order_id,json=originalClientOrderId,proto3" json:"original_client_order_id,omitempty" yaml:"original_client_order_id"`
	NewClientOrderId  string      `protobuf:"bytes,3,opt,name=new_client_order_id,json=newClientOrderId,proto3" json:"new_client_order_id,omitempty" yaml:"new_client_order_id"`
	TimeInForce       TimeInForce `protobuf:"varint,4,opt,name=time_in_force,json=timeInForce,proto3,enum=em.market.v1.TimeInForce" json:"time_in_force,omitempty" yaml:"time_in_force"`
	Source            types.Coin  `protobuf:"bytes,5,opt,name=source,proto3" json:"source" yaml:"source"`
	Destination       types.Coin  `protobuf:"bytes,6,opt,name=destination,proto3" json:"destination" yaml:"destination"`
}

func (m *MsgCancelReplaceLimitOrder) Reset()         { *m = MsgCancelReplaceLimitOrder{} }
func (m *MsgCancelReplaceLimitOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelReplaceLimitOrder) ProtoMessage()    {}
func (*MsgCancelReplaceLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{6}
}
func (m *MsgCancelReplaceLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelReplaceLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelReplaceLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelReplaceLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelReplaceLimitOrder.Merge(m, src)
}
func (m *MsgCancelReplaceLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelReplaceLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelReplaceLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelReplaceLimitOrder proto.InternalMessageInfo

func (m *MsgCancelReplaceLimitOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCancelReplaceLimitOrder) GetOrigClientOrderId() string {
	if m != nil {
		return m.OrigClientOrderId
	}
	return ""
}

func (m *MsgCancelReplaceLimitOrder) GetNewClientOrderId() string {
	if m != nil {
		return m.NewClientOrderId
	}
	return ""
}

func (m *MsgCancelReplaceLimitOrder) GetTimeInForce() TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForce_Unspecified
}

func (m *MsgCancelReplaceLimitOrder) GetSource() types.Coin {
	if m != nil {
		return m.Source
	}
	return types.Coin{}
}

func (m *MsgCancelReplaceLimitOrder) GetDestination() types.Coin {
	if m != nil {
		return m.Destination
	}
	return types.Coin{}
}

type MsgCancelReplaceLimitOrderResponse struct {
}

func (m *MsgCancelReplaceLimitOrderResponse) Reset()         { *m = MsgCancelReplaceLimitOrderResponse{} }
func (m *MsgCancelReplaceLimitOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelReplaceLimitOrderResponse) ProtoMessage()    {}
func (*MsgCancelReplaceLimitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{7}
}
func (m *MsgCancelReplaceLimitOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelReplaceLimitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelReplaceLimitOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelReplaceLimitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelReplaceLimitOrderResponse.Merge(m, src)
}
func (m *MsgCancelReplaceLimitOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelReplaceLimitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelReplaceLimitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelReplaceLimitOrderResponse proto.InternalMessageInfo

type MsgCancelReplaceMarketOrder struct {
	Owner             string                                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	OrigClientOrderId string                                 `protobuf:"bytes,2,opt,name=original_client_order_id,json=originalClientOrderId,proto3" json:"original_client_order_id,omitempty" yaml:"original_client_order_id"`
	NewClientOrderId  string                                 `protobuf:"bytes,3,opt,name=new_client_order_id,json=newClientOrderId,proto3" json:"new_client_order_id,omitempty" yaml:"new_client_order_id"`
	TimeInForce       TimeInForce                            `protobuf:"varint,4,opt,name=time_in_force,json=timeInForce,proto3,enum=em.market.v1.TimeInForce" json:"time_in_force,omitempty" yaml:"time_in_force"`
	Source            string                                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty" yaml:"source"`
	Destination       types.Coin                             `protobuf:"bytes,6,opt,name=destination,proto3" json:"destination" yaml:"destination"`
	MaxSlippage       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=maximum_slippage,json=maximumSlippage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maximum_slippage" yaml:"maximum_slippage"`
}

func (m *MsgCancelReplaceMarketOrder) Reset()         { *m = MsgCancelReplaceMarketOrder{} }
func (m *MsgCancelReplaceMarketOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelReplaceMarketOrder) ProtoMessage()    {}
func (*MsgCancelReplaceMarketOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{8}
}
func (m *MsgCancelReplaceMarketOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelReplaceMarketOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelReplaceMarketOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelReplaceMarketOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelReplaceMarketOrder.Merge(m, src)
}
func (m *MsgCancelReplaceMarketOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelReplaceMarketOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelReplaceMarketOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelReplaceMarketOrder proto.InternalMessageInfo

func (m *MsgCancelReplaceMarketOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCancelReplaceMarketOrder) GetOrigClientOrderId() string {
	if m != nil {
		return m.OrigClientOrderId
	}
	return ""
}

func (m *MsgCancelReplaceMarketOrder) GetNewClientOrderId() string {
	if m != nil {
		return m.NewClientOrderId
	}
	return ""
}

func (m *MsgCancelReplaceMarketOrder) GetTimeInForce() TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForce_Unspecified
}

func (m *MsgCancelReplaceMarketOrder) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MsgCancelReplaceMarketOrder) GetDestination() types.Coin {
	if m != nil {
		return m.Destination
	}
	return types.Coin{}
}

type MsgCancelReplaceMarketOrderResponse struct {
}

func (m *MsgCancelReplaceMarketOrderResponse) Reset()         { *m = MsgCancelReplaceMarketOrderResponse{} }
func (m *MsgCancelReplaceMarketOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelReplaceMarketOrderResponse) ProtoMessage()    {}
func (*MsgCancelReplaceMarketOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_636272ab2288df51, []int{9}
}
func (m *MsgCancelReplaceMarketOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelReplaceMarketOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelReplaceMarketOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelReplaceMarketOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelReplaceMarketOrderResponse.Merge(m, src)
}
func (m *MsgCancelReplaceMarketOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelReplaceMarketOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelReplaceMarketOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelReplaceMarketOrderResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddLimitOrder)(nil), "em.market.v1.MsgAddLimitOrder")
	proto.RegisterType((*MsgAddLimitOrderResponse)(nil), "em.market.v1.MsgAddLimitOrderResponse")
	proto.RegisterType((*MsgAddMarketOrder)(nil), "em.market.v1.MsgAddMarketOrder")
	proto.RegisterType((*MsgAddMarketOrderResponse)(nil), "em.market.v1.MsgAddMarketOrderResponse")
	proto.RegisterType((*MsgCancelOrder)(nil), "em.market.v1.MsgCancelOrder")
	proto.RegisterType((*MsgCancelOrderResponse)(nil), "em.market.v1.MsgCancelOrderResponse")
	proto.RegisterType((*MsgCancelReplaceLimitOrder)(nil), "em.market.v1.MsgCancelReplaceLimitOrder")
	proto.RegisterType((*MsgCancelReplaceLimitOrderResponse)(nil), "em.market.v1.MsgCancelReplaceLimitOrderResponse")
	proto.RegisterType((*MsgCancelReplaceMarketOrder)(nil), "em.market.v1.MsgCancelReplaceMarketOrder")
	proto.RegisterType((*MsgCancelReplaceMarketOrderResponse)(nil), "em.market.v1.MsgCancelReplaceMarketOrderResponse")
}

func init() { proto.RegisterFile("em/market/v1/tx.proto", fileDescriptor_636272ab2288df51) }

var fileDescriptor_636272ab2288df51 = []byte{
	// 780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x9b, 0x0f, 0xd4, 0x4d, 0x3f, 0x52, 0xd3, 0x0f, 0xc7, 0x45, 0x76, 0x65, 0x4a, 0x49,
	0x85, 0x6a, 0x93, 0x70, 0x41, 0xdc, 0x48, 0x01, 0x51, 0x89, 0x50, 0x61, 0x90, 0x8a, 0x7a, 0x89,
	0x1c, 0x7b, 0x6b, 0x56, 0xf5, 0x7a, 0x83, 0xed, 0xb4, 0xa9, 0xc4, 0x8d, 0x3f, 0xc0, 0x89, 0xdf,
	0xd4, 0x63, 0x8f, 0x88, 0x83, 0x85, 0xd2, 0x7f, 0x90, 0x23, 0x87, 0x0a, 0xd9, 0xeb, 0x04, 0xc7,
	0x69, 0xd2, 0x52, 0x95, 0x1e, 0x10, 0xa7, 0x36, 0x3b, 0xef, 0xbd, 0x19, 0xcd, 0x8c, 0xdf, 0x2e,
	0x58, 0x80, 0x58, 0xc1, 0x9a, 0xb3, 0x0f, 0x3d, 0xe5, 0xa0, 0xac, 0x78, 0x6d, 0xb9, 0xe9, 0x10,
	0x8f, 0xb0, 0x53, 0x10, 0xcb, 0xf4, 0x58, 0x3e, 0x28, 0xf3, 0xf3, 0x26, 0x31, 0x49, 0x18, 0x50,
	0x82, 0xff, 0x28, 0x86, 0x17, 0x74, 0xe2, 0x62, 0xe2, 0x2a, 0x0d, 0xcd, 0x85, 0xca, 0x41, 0xb9,
	0x01, 0x3d, 0xad, 0xac, 0xe8, 0x04, 0xd9, 0x51, 0xbc, 0x38, 0x20, 0x1d, 0xa9, 0xd1, 0x90, 0x68,
	0x12, 0x62, 0x5a, 0x50, 0x09, 0x7f, 0x35, 0x5a, 0x7b, 0x8a, 0x87, 0x30, 0x74, 0x3d, 0x0d, 0x37,
	0x29, 0x40, 0xfa, 0x39, 0x01, 0x0a, 0x35, 0xd7, 0x7c, 0x6a, 0x18, 0xaf, 0x10, 0x46, 0xde, 0xb6,
	0x63, 0x40, 0x87, 0x5d, 0x03, 0x59, 0x72, 0x68, 0x43, 0x87, 0x63, 0x56, 0x98, 0xd2, 0x64, 0xb5,
	0xd0, 0xf5, 0xc5, 0xa9, 0x23, 0x0d, 0x5b, 0x4f, 0xa4, 0xf0, 0x58, 0x52, 0x69, 0x98, 0xad, 0x82,
	0x59, 0xdd, 0x42, 0xd0, 0xf6, 0xea, 0x24, 0xe0, 0xd5, 0x91, 0xc1, 0x4d, 0x84, 0x0c, 0xbe, 0xeb,
	0x8b, 0x8b, 0x94, 0x91, 0x00, 0x48, 0xea, 0x34, 0x3d, 0x09, 0x33, 0x6d, 0x19, 0xec, 0x0e, 0x98,
	0x0e, 0x6a, 0xaa, 0x23, 0xbb, 0xbe, 0x47, 0x1c, 0x1d, 0x72, 0xe9, 0x15, 0xa6, 0x34, 0x53, 0x29,
	0xca, 0xf1, 0xc6, 0xc8, 0xef, 0x10, 0x86, 0x5b, 0xf6, 0x8b, 0x00, 0x50, 0xe5, 0xba, 0xbe, 0x38,
	0x4f, 0xc5, 0x07, 0x98, 0x92, 0x9a, 0xf7, 0x7e, 0xc3, 0xd8, 0x97, 0x20, 0xe7, 0x92, 0x56, 0xa0,
	0x98, 0x59, 0x61, 0x4a, 0xf9, 0x4a, 0x51, 0xa6, 0x6d, 0x94, 0x83, 0x36, 0xca, 0x51, 0x1b, 0xe5,
	0x4d, 0x82, 0xec, 0xea, 0xc2, 0xb1, 0x2f, 0xa6, 0xba, 0xbe, 0x38, 0x4d, 0x55, 0x29, 0x4d, 0x52,
	0x23, 0x3e, 0xbb, 0x03, 0xf2, 0x06, 0x74, 0x3d, 0x64, 0x6b, 0x1e, 0x22, 0x36, 0x97, 0xbd, 0x48,
	0x8e, 0x8f, 0xe4, 0x58, 0x2a, 0x17, 0xe3, 0x4a, 0x6a, 0x5c, 0x49, 0xe2, 0x01, 0x97, 0xec, 0xbd,
	0x0a, 0xdd, 0x26, 0xb1, 0x5d, 0x28, 0x75, 0xd2, 0x60, 0x8e, 0x06, 0x6b, 0x61, 0x17, 0xfe, 0xa1,
	0xc9, 0xac, 0x0f, 0x4c, 0x66, 0xb2, 0x3a, 0x77, 0xf3, 0xad, 0x67, 0x3f, 0x33, 0xa0, 0x80, 0xb5,
	0x36, 0xc2, 0x2d, 0x5c, 0x77, 0x2d, 0xd4, 0x6c, 0x6a, 0x26, 0xe4, 0x72, 0x61, 0x39, 0xef, 0x03,
	0x8d, 0xef, 0xbe, 0xb8, 0x66, 0x22, 0xef, 0x43, 0xab, 0x21, 0xeb, 0x04, 0x2b, 0xd1, 0x17, 0x48,
	0xff, 0x6c, 0xb8, 0xc6, 0xbe, 0xe2, 0x1d, 0x35, 0xa1, 0x2b, 0x3f, 0x83, 0x7a, 0xc7, 0x17, 0xf3,
	0x35, 0xad, 0xfd, 0x36, 0x12, 0xe9, 0xfa, 0xe2, 0x12, 0x4d, 0x9e, 0x94, 0x97, 0xd4, 0xd9, 0xe8,
	0xa8, 0x87, 0x95, 0x96, 0x41, 0x71, 0x68, 0xc6, 0xfd, 0x0d, 0xf8, 0x04, 0x66, 0x6a, 0xae, 0xb9,
	0xa9, 0xd9, 0x3a, 0xb4, 0x6e, 0x7c, 0xfa, 0x12, 0x07, 0x16, 0x07, 0xb3, 0xf7, 0xeb, 0xfa, 0x9a,
	0x01, 0x7c, 0x3f, 0xa4, 0xc2, 0xa6, 0xa5, 0xe9, 0xf0, 0x0a, 0xe6, 0xf1, 0x11, 0x70, 0xc4, 0x41,
	0x26, 0xb2, 0x35, 0xab, 0x7e, 0x7e, 0xb5, 0x8f, 0x3b, 0xbe, 0x38, 0xb7, 0xed, 0x20, 0x73, 0x33,
	0x5e, 0x59, 0xd7, 0x17, 0xc5, 0x48, 0x6f, 0x04, 0x5d, 0x52, 0x17, 0x7a, 0xa1, 0x01, 0x26, 0xab,
	0x81, 0xdb, 0x36, 0x3c, 0x1c, 0xca, 0x96, 0x0e, 0xb3, 0x55, 0x3a, 0xbe, 0x58, 0x78, 0x0d, 0x0f,
	0x93, 0xc9, 0x78, 0x9a, 0xec, 0x1c, 0xa2, 0xa4, 0x16, 0xec, 0x04, 0x7e, 0xf8, 0xa3, 0xc9, 0x5c,
	0xbb, 0x9d, 0x65, 0xaf, 0xd7, 0xce, 0x72, 0xd7, 0x66, 0x67, 0xab, 0x40, 0x1a, 0xbd, 0x17, 0xfd,
	0xf5, 0x39, 0xcb, 0x80, 0xe5, 0x24, 0xec, 0x2a, 0x16, 0xf7, 0x7f, 0x7f, 0xae, 0x68, 0xba, 0xd9,
	0x3f, 0x34, 0xdd, 0xdc, 0xdf, 0x35, 0xdd, 0x5b, 0x37, 0x6d, 0xba, 0xf7, 0xc0, 0xdd, 0x31, 0xfb,
	0xd7, 0xdb, 0xd3, 0xca, 0x59, 0x1a, 0xa4, 0x6b, 0xae, 0x19, 0x4c, 0x64, 0xf0, 0x75, 0x24, 0x0c,
	0xce, 0x22, 0x79, 0x83, 0xf3, 0x6b, 0xe3, 0xe3, 0xbd, 0x04, 0xec, 0x2e, 0x98, 0x49, 0xdc, 0xee,
	0xe2, 0x79, 0xcc, 0x18, 0x80, 0xbf, 0x7f, 0x01, 0xa0, 0xaf, 0xfd, 0x06, 0xe4, 0xe3, 0x17, 0xc7,
	0x9d, 0x21, 0x5e, 0x2c, 0xca, 0xaf, 0x8e, 0x8b, 0xf6, 0x25, 0x5b, 0x60, 0x69, 0x94, 0xe5, 0x97,
	0x46, 0x08, 0x0c, 0x21, 0xf9, 0x87, 0x97, 0x45, 0xf6, 0xd3, 0xb6, 0x01, 0x37, 0xd2, 0x2a, 0xd6,
	0xc7, 0xab, 0xc5, 0x3b, 0x57, 0xbe, 0x34, 0xb4, 0x97, 0xb9, 0xfa, 0xfc, 0xb8, 0x23, 0x30, 0x27,
	0x1d, 0x81, 0xf9, 0xd1, 0x11, 0x98, 0x2f, 0xa7, 0x42, 0xea, 0xe4, 0x54, 0x48, 0x7d, 0x3b, 0x15,
	0x52, 0xbb, 0x0f, 0x62, 0x4b, 0x0a, 0x37, 0x30, 0xb1, 0xe1, 0x91, 0x02, 0xf1, 0x86, 0x05, 0x0d,
	0x13, 0x3a, 0x4a, 0xbb, 0xf7, 0x18, 0x0f, 0xb7, 0xb5, 0x91, 0x0b, 0x1f, 0xda, 0x8f, 0x7e, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x7e, 0x1f, 0x6d, 0x63, 0x01, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddLimitOrder(ctx context.Context, in *MsgAddLimitOrder, opts ...grpc.CallOption) (*MsgAddLimitOrderResponse, error)
	AddMarketOrder(ctx context.Context, in *MsgAddMarketOrder, opts ...grpc.CallOption) (*MsgAddMarketOrderResponse, error)
	CancelOrder(ctx context.Context, in *MsgCancelOrder, opts ...grpc.CallOption) (*MsgCancelOrderResponse, error)
	CancelReplaceLimitOrder(ctx context.Context, in *MsgCancelReplaceLimitOrder, opts ...grpc.CallOption) (*MsgCancelReplaceLimitOrderResponse, error)
	CancelReplaceMarketOrder(ctx context.Context, in *MsgCancelReplaceMarketOrder, opts ...grpc.CallOption) (*MsgCancelReplaceMarketOrderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddLimitOrder(ctx context.Context, in *MsgAddLimitOrder, opts ...grpc.CallOption) (*MsgAddLimitOrderResponse, error) {
	out := new(MsgAddLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/em.market.v1.Msg/AddLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMarketOrder(ctx context.Context, in *MsgAddMarketOrder, opts ...grpc.CallOption) (*MsgAddMarketOrderResponse, error) {
	out := new(MsgAddMarketOrderResponse)
	err := c.cc.Invoke(ctx, "/em.market.v1.Msg/AddMarketOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelOrder(ctx context.Context, in *MsgCancelOrder, opts ...grpc.CallOption) (*MsgCancelOrderResponse, error) {
	out := new(MsgCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/em.market.v1.Msg/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelReplaceLimitOrder(ctx context.Context, in *MsgCancelReplaceLimitOrder, opts ...grpc.CallOption) (*MsgCancelReplaceLimitOrderResponse, error) {
	out := new(MsgCancelReplaceLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/em.market.v1.Msg/CancelReplaceLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelReplaceMarketOrder(ctx context.Context, in *MsgCancelReplaceMarketOrder, opts ...grpc.CallOption) (*MsgCancelReplaceMarketOrderResponse, error) {
	out := new(MsgCancelReplaceMarketOrderResponse)
	err := c.cc.Invoke(ctx, "/em.market.v1.Msg/CancelReplaceMarketOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddLimitOrder(context.Context, *MsgAddLimitOrder) (*MsgAddLimitOrderResponse, error)
	AddMarketOrder(context.Context, *MsgAddMarketOrder) (*MsgAddMarketOrderResponse, error)
	CancelOrder(context.Context, *MsgCancelOrder) (*MsgCancelOrderResponse, error)
	CancelReplaceLimitOrder(context.Context, *MsgCancelReplaceLimitOrder) (*MsgCancelReplaceLimitOrderResponse, error)
	CancelReplaceMarketOrder(context.Context, *MsgCancelReplaceMarketOrder) (*MsgCancelReplaceMarketOrderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddLimitOrder(ctx context.Context, req *MsgAddLimitOrder) (*MsgAddLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLimitOrder not implemented")
}
func (*UnimplementedMsgServer) AddMarketOrder(ctx context.Context, req *MsgAddMarketOrder) (*MsgAddMarketOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMarketOrder not implemented")
}
func (*UnimplementedMsgServer) CancelOrder(ctx context.Context, req *MsgCancelOrder) (*MsgCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedMsgServer) CancelReplaceLimitOrder(ctx context.Context, req *MsgCancelReplaceLimitOrder) (*MsgCancelReplaceLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReplaceLimitOrder not implemented")
}
func (*UnimplementedMsgServer) CancelReplaceMarketOrder(ctx context.Context, req *MsgCancelReplaceMarketOrder) (*MsgCancelReplaceMarketOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReplaceMarketOrder not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLimitOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.market.v1.Msg/AddLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLimitOrder(ctx, req.(*MsgAddLimitOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMarketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMarketOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMarketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.market.v1.Msg/AddMarketOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMarketOrder(ctx, req.(*MsgAddMarketOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.market.v1.Msg/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelOrder(ctx, req.(*MsgCancelOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelReplaceLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelReplaceLimitOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelReplaceLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.market.v1.Msg/CancelReplaceLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelReplaceLimitOrder(ctx, req.(*MsgCancelReplaceLimitOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelReplaceMarketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelReplaceMarketOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelReplaceMarketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.market.v1.Msg/CancelReplaceMarketOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelReplaceMarketOrder(ctx, req.(*MsgCancelReplaceMarketOrder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "em.market.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLimitOrder",
			Handler:    _Msg_AddLimitOrder_Handler,
		},
		{
			MethodName: "AddMarketOrder",
			Handler:    _Msg_AddMarketOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Msg_CancelOrder_Handler,
		},
		{
			MethodName: "CancelReplaceLimitOrder",
			Handler:    _Msg_CancelReplaceLimitOrder_Handler,
		},
		{
			MethodName: "CancelReplaceMarketOrder",
			Handler:    _Msg_CancelReplaceMarketOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "em/market/v1/tx.proto",
}

func (m *MsgAddLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.TimeInForce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClientOrderId) > 0 {
		i -= len(m.ClientOrderId)
		copy(dAtA[i:], m.ClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddLimitOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLimitOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLimitOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddMarketOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMarketOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMarketOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxSlippage.Size()
		i -= size
		if _, err := m.MaxSlippage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x22
	}
	if m.TimeInForce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClientOrderId) > 0 {
		i -= len(m.ClientOrderId)
		copy(dAtA[i:], m.ClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMarketOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMarketOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMarketOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientOrderId) > 0 {
		i -= len(m.ClientOrderId)
		copy(dAtA[i:], m.ClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelReplaceLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelReplaceLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelReplaceLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.TimeInForce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NewClientOrderId) > 0 {
		i -= len(m.NewClientOrderId)
		copy(dAtA[i:], m.NewClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewClientOrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrigClientOrderId) > 0 {
		i -= len(m.OrigClientOrderId)
		copy(dAtA[i:], m.OrigClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrigClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelReplaceLimitOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelReplaceLimitOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelReplaceLimitOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelReplaceMarketOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelReplaceMarketOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelReplaceMarketOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxSlippage.Size()
		i -= size
		if _, err := m.MaxSlippage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeInForce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NewClientOrderId) > 0 {
		i -= len(m.NewClientOrderId)
		copy(dAtA[i:], m.NewClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewClientOrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrigClientOrderId) > 0 {
		i -= len(m.OrigClientOrderId)
		copy(dAtA[i:], m.OrigClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrigClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelReplaceMarketOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelReplaceMarketOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelReplaceMarketOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovTx(uint64(m.TimeInForce))
	}
	l = m.Source.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Destination.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddLimitOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddMarketOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovTx(uint64(m.TimeInForce))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Destination.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxSlippage.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddMarketOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelReplaceLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrigClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovTx(uint64(m.TimeInForce))
	}
	l = m.Source.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Destination.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCancelReplaceLimitOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelReplaceMarketOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrigClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovTx(uint64(m.TimeInForce))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Destination.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxSlippage.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCancelReplaceMarketOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= TimeInForce(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLimitOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLimitOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLimitOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMarketOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMarketOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMarketOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= TimeInForce(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlippage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSlippage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMarketOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMarketOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMarketOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelReplaceLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelReplaceLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelReplaceLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= TimeInForce(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelReplaceLimitOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelReplaceLimitOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelReplaceLimitOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelReplaceMarketOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelReplaceMarketOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelReplaceMarketOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= TimeInForce(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlippage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSlippage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelReplaceMarketOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelReplaceMarketOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelReplaceMarketOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
