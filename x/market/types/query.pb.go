// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: em/market/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryByAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
}

func (m *QueryByAccountRequest) Reset()         { *m = QueryByAccountRequest{} }
func (m *QueryByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryByAccountRequest) ProtoMessage()    {}
func (*QueryByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf874bc4a5bd31, []int{0}
}
func (m *QueryByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryByAccountRequest.Merge(m, src)
}
func (m *QueryByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryByAccountRequest proto.InternalMessageInfo

func (m *QueryByAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryByAccountResponse struct {
	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty" yaml:"orders"`
}

func (m *QueryByAccountResponse) Reset()      { *m = QueryByAccountResponse{} }
func (*QueryByAccountResponse) ProtoMessage() {}
func (*QueryByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf874bc4a5bd31, []int{1}
}
func (m *QueryByAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryByAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryByAccountResponse.Merge(m, src)
}
func (m *QueryByAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryByAccountResponse proto.InternalMessageInfo

func (m *QueryByAccountResponse) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type QueryInstrumentsRequest struct {
}

func (m *QueryInstrumentsRequest) Reset()         { *m = QueryInstrumentsRequest{} }
func (m *QueryInstrumentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInstrumentsRequest) ProtoMessage()    {}
func (*QueryInstrumentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf874bc4a5bd31, []int{2}
}
func (m *QueryInstrumentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInstrumentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInstrumentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInstrumentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInstrumentsRequest.Merge(m, src)
}
func (m *QueryInstrumentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInstrumentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInstrumentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInstrumentsRequest proto.InternalMessageInfo

type QueryInstrumentsResponse struct {
	Instruments []QueryInstrumentsResponse_Element `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments" yaml:"instruments"`
}

func (m *QueryInstrumentsResponse) Reset()      { *m = QueryInstrumentsResponse{} }
func (*QueryInstrumentsResponse) ProtoMessage() {}
func (*QueryInstrumentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf874bc4a5bd31, []int{3}
}
func (m *QueryInstrumentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInstrumentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInstrumentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInstrumentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInstrumentsResponse.Merge(m, src)
}
func (m *QueryInstrumentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInstrumentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInstrumentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInstrumentsResponse proto.InternalMessageInfo

func (m *QueryInstrumentsResponse) GetInstruments() []QueryInstrumentsResponse_Element {
	if m != nil {
		return m.Instruments
	}
	return nil
}

type QueryInstrumentsResponse_Element struct {
	Source      string                                  `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty" yaml:"source"`
	Destination string                                  `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty" yaml:"destination"`
	LastPrice   *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=last_price,json=lastPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_price,omitempty" yaml:"last_price"`
	BestPrice   *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=best_price,json=bestPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"best_price,omitempty" yaml:"best_price"`
	LastTraded  *time.Time                              `protobuf:"bytes,5,opt,name=last_traded,json=lastTraded,proto3,stdtime" json:"last_traded,omitempty" yaml:"last_traded"`
}

func (m *QueryInstrumentsResponse_Element) Reset()      { *m = QueryInstrumentsResponse_Element{} }
func (*QueryInstrumentsResponse_Element) ProtoMessage() {}
func (*QueryInstrumentsResponse_Element) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf874bc4a5bd31, []int{3, 0}
}
func (m *QueryInstrumentsResponse_Element) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInstrumentsResponse_Element) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInstrumentsResponse_Element.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInstrumentsResponse_Element) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInstrumentsResponse_Element.Merge(m, src)
}
func (m *QueryInstrumentsResponse_Element) XXX_Size() int {
	return m.Size()
}
func (m *QueryInstrumentsResponse_Element) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInstrumentsResponse_Element.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInstrumentsResponse_Element proto.InternalMessageInfo

func (m *QueryInstrumentsResponse_Element) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *QueryInstrumentsResponse_Element) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *QueryInstrumentsResponse_Element) GetLastTraded() *time.Time {
	if m != nil {
		return m.LastTraded
	}
	return nil
}

type QueryInstrumentRequest struct {
	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (m *QueryInstrumentRequest) Reset()         { *m = QueryInstrumentRequest{} }
func (m *QueryInstrumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInstrumentRequest) ProtoMessage()    {}
func (*QueryInstrumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf874bc4a5bd31, []int{4}
}
func (m *QueryInstrumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInstrumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInstrumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInstrumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInstrumentRequest.Merge(m, src)
}
func (m *QueryInstrumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInstrumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInstrumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInstrumentRequest proto.InternalMessageInfo

func (m *QueryInstrumentRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *QueryInstrumentRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type QueryInstrumentResponse struct {
	Source      string               `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty" yaml:"source"`
	Destination string               `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty" yaml:"destination"`
	Orders      []QueryOrderResponse `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders" yaml:"orders"`
}

func (m *QueryInstrumentResponse) Reset()      { *m = QueryInstrumentResponse{} }
func (*QueryInstrumentResponse) ProtoMessage() {}
func (*QueryInstrumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf874bc4a5bd31, []int{5}
}
func (m *QueryInstrumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInstrumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInstrumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInstrumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInstrumentResponse.Merge(m, src)
}
func (m *QueryInstrumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInstrumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInstrumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInstrumentResponse proto.InternalMessageInfo

func (m *QueryInstrumentResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *QueryInstrumentResponse) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *QueryInstrumentResponse) GetOrders() []QueryOrderResponse {
	if m != nil {
		return m.Orders
	}
	return nil
}

type QueryOrderResponse struct {
	ID              uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Owner           string                                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	SourceRemaining string                                 `protobuf:"bytes,3,opt,name=source_remaining,json=sourceRemaining,proto3" json:"source_remaining,omitempty" yaml:"source_remaining"`
	ClientOrderId   string                                 `protobuf:"bytes,4,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty" yaml:"client_order_id"`
	Price           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
}

func (m *QueryOrderResponse) Reset()      { *m = QueryOrderResponse{} }
func (*QueryOrderResponse) ProtoMessage() {}
func (*QueryOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf874bc4a5bd31, []int{6}
}
func (m *QueryOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderResponse.Merge(m, src)
}
func (m *QueryOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderResponse proto.InternalMessageInfo

func (m *QueryOrderResponse) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *QueryOrderResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryOrderResponse) GetSourceRemaining() string {
	if m != nil {
		return m.SourceRemaining
	}
	return ""
}

func (m *QueryOrderResponse) GetClientOrderId() string {
	if m != nil {
		return m.ClientOrderId
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryByAccountRequest)(nil), "em.market.v1.QueryByAccountRequest")
	proto.RegisterType((*QueryByAccountResponse)(nil), "em.market.v1.QueryByAccountResponse")
	proto.RegisterType((*QueryInstrumentsRequest)(nil), "em.market.v1.QueryInstrumentsRequest")
	proto.RegisterType((*QueryInstrumentsResponse)(nil), "em.market.v1.QueryInstrumentsResponse")
	proto.RegisterType((*QueryInstrumentsResponse_Element)(nil), "em.market.v1.QueryInstrumentsResponse.Element")
	proto.RegisterType((*QueryInstrumentRequest)(nil), "em.market.v1.QueryInstrumentRequest")
	proto.RegisterType((*QueryInstrumentResponse)(nil), "em.market.v1.QueryInstrumentResponse")
	proto.RegisterType((*QueryOrderResponse)(nil), "em.market.v1.QueryOrderResponse")
}

func init() { proto.RegisterFile("em/market/v1/query.proto", fileDescriptor_80bf874bc4a5bd31) }

var fileDescriptor_80bf874bc4a5bd31 = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x5f, 0x6b, 0x2b, 0x45,
	0x14, 0xcf, 0xe6, 0x4f, 0x2f, 0x99, 0xdc, 0xeb, 0xbd, 0x77, 0xae, 0x4d, 0xd3, 0x28, 0xbb, 0x61,
	0xda, 0x86, 0x8a, 0xed, 0x0e, 0xa9, 0x22, 0x52, 0x44, 0x71, 0x69, 0x0b, 0x7d, 0xaa, 0x2e, 0x05,
	0xc1, 0x07, 0xc3, 0x66, 0x77, 0x8c, 0x4b, 0xb3, 0x3b, 0xe9, 0xce, 0xa4, 0x1a, 0x4a, 0x5f, 0xc4,
	0x57, 0xa1, 0xe0, 0x83, 0x3e, 0x89, 0xdf, 0xc0, 0xaf, 0xd1, 0x17, 0xa1, 0x20, 0x82, 0xf8, 0xb0,
	0x4a, 0xea, 0x27, 0xc8, 0x27, 0x90, 0x9d, 0x99, 0xcd, 0x6e, 0xda, 0xd8, 0xaa, 0x0f, 0x3e, 0x25,
	0x7b, 0xfe, 0xfc, 0xe6, 0x77, 0xce, 0xf9, 0x9d, 0x03, 0x1a, 0x24, 0xc0, 0x81, 0x13, 0x9d, 0x10,
	0x8e, 0xcf, 0x3a, 0xf8, 0x74, 0x44, 0xa2, 0xb1, 0x39, 0x8c, 0x28, 0xa7, 0xf0, 0x31, 0x09, 0x4c,
	0xe9, 0x31, 0xcf, 0x3a, 0xcd, 0x97, 0xfb, 0xb4, 0x4f, 0x85, 0x03, 0x27, 0xff, 0x64, 0x4c, 0x53,
	0x77, 0x29, 0x0b, 0x28, 0xc3, 0x3d, 0x87, 0x11, 0x7c, 0xd6, 0xe9, 0x11, 0xee, 0x74, 0xb0, 0x4b,
	0xfd, 0x50, 0xf9, 0x5f, 0xed, 0x53, 0xda, 0x1f, 0x10, 0xec, 0x0c, 0x7d, 0xec, 0x84, 0x21, 0xe5,
	0x0e, 0xf7, 0x69, 0xc8, 0x94, 0xd7, 0x50, 0x5e, 0xf1, 0xd5, 0x1b, 0x7d, 0x8a, 0xb9, 0x1f, 0x10,
	0xc6, 0x9d, 0x60, 0xa8, 0x02, 0x56, 0xe7, 0xc8, 0x29, 0x32, 0xc2, 0x85, 0xf6, 0xc1, 0xf2, 0x87,
	0x09, 0x59, 0x6b, 0xfc, 0xbe, 0xeb, 0xd2, 0x51, 0xc8, 0x6d, 0x72, 0x3a, 0x22, 0x8c, 0xc3, 0x2d,
	0xf0, 0xc8, 0xf1, 0xbc, 0x88, 0x30, 0xd6, 0xd0, 0x5a, 0xda, 0x66, 0xd5, 0x82, 0xd3, 0xd8, 0x78,
	0x69, 0xec, 0x04, 0x83, 0x5d, 0xa4, 0x1c, 0xc8, 0x4e, 0x43, 0x50, 0x0f, 0xd4, 0x6f, 0xc3, 0xb0,
	0x21, 0x0d, 0x19, 0x81, 0x16, 0x58, 0xa2, 0x91, 0x47, 0xa2, 0x04, 0xa6, 0xb4, 0x59, 0xdb, 0x79,
	0x61, 0xe6, 0xfb, 0x61, 0x1e, 0x25, 0x3e, 0x6b, 0xf9, 0x2a, 0x36, 0xb4, 0x69, 0x6c, 0x3c, 0x91,
	0xf8, 0x32, 0x01, 0xd9, 0x2a, 0x73, 0xb7, 0xfc, 0xdd, 0x0f, 0x46, 0x01, 0xad, 0x82, 0x15, 0xf1,
	0xc6, 0x61, 0xc8, 0x78, 0x34, 0x0a, 0x48, 0xc8, 0x99, 0x22, 0x8b, 0xbe, 0x2f, 0x83, 0xc6, 0x5d,
	0x9f, 0x62, 0x30, 0x00, 0x35, 0x3f, 0x33, 0x2b, 0x1a, 0xe6, 0x3c, 0x8d, 0xbf, 0x4b, 0x36, 0xf7,
	0x07, 0x24, 0x31, 0x58, 0xcd, 0xab, 0xd8, 0x28, 0x4c, 0x63, 0x03, 0x4a, 0x86, 0x39, 0x40, 0x64,
	0xe7, 0xe1, 0x9b, 0x5f, 0x97, 0xc0, 0x23, 0x95, 0x04, 0x5f, 0x03, 0x4b, 0x8c, 0x8e, 0x22, 0x97,
	0xa8, 0x16, 0x3e, 0xcf, 0x4a, 0x94, 0x76, 0x64, 0xab, 0x00, 0xf8, 0x36, 0xa8, 0x79, 0x84, 0x71,
	0x3f, 0x14, 0x93, 0x6d, 0x14, 0x45, 0x7c, 0x3d, 0x7b, 0x30, 0xe7, 0x44, 0x76, 0x3e, 0x14, 0x7e,
	0x02, 0xc0, 0xc0, 0x61, 0xbc, 0x3b, 0x8c, 0x7c, 0x97, 0x34, 0x4a, 0x22, 0xf1, 0xbd, 0xdf, 0x62,
	0xa3, 0xdd, 0xf7, 0xf9, 0x67, 0xa3, 0x9e, 0xe9, 0xd2, 0x00, 0x2b, 0x79, 0xc9, 0x9f, 0x6d, 0xe6,
	0x9d, 0x60, 0x3e, 0x1e, 0x12, 0x66, 0xee, 0x11, 0x77, 0x1a, 0x1b, 0xcf, 0xe5, 0x13, 0x19, 0x0a,
	0xb2, 0xab, 0xc9, 0xc7, 0x07, 0xc9, 0xff, 0x04, 0xbf, 0x47, 0x66, 0xf8, 0xe5, 0xff, 0x8e, 0x9f,
	0xa1, 0x20, 0xbb, 0x9a, 0x7c, 0x48, 0xfc, 0x8f, 0x40, 0x4d, 0xbc, 0xcc, 0x23, 0xc7, 0x23, 0x5e,
	0xa3, 0xd2, 0xd2, 0x36, 0x6b, 0x3b, 0x4d, 0x53, 0x6a, 0xda, 0x4c, 0x35, 0x6d, 0x1e, 0xa7, 0x9a,
	0xb6, 0x9a, 0x59, 0x57, 0x72, 0x89, 0xe8, 0xf2, 0x77, 0x43, 0xb3, 0x45, 0x2b, 0x8e, 0x85, 0x41,
	0xaa, 0x46, 0x69, 0xc7, 0x56, 0xfa, 0xcc, 0x46, 0x9c, 0xea, 0xbc, 0x3e, 0x3f, 0xa3, 0xd9, 0x40,
	0x5a, 0x0b, 0x06, 0x32, 0xd7, 0x78, 0xf4, 0x8b, 0x76, 0x47, 0x90, 0x33, 0xcd, 0xfd, 0x2f, 0x93,
	0x3f, 0x9a, 0xad, 0x56, 0x49, 0x68, 0xba, 0xb5, 0x40, 0xd3, 0x62, 0xbf, 0x52, 0x5a, 0x62, 0xcf,
	0x0a, 0x0f, 0xed, 0xd9, 0x4f, 0x45, 0x00, 0xef, 0xe6, 0xc2, 0x35, 0x50, 0xf4, 0x3d, 0x51, 0x4e,
	0xd9, 0x7a, 0x31, 0x89, 0x8d, 0xe2, 0xe1, 0xde, 0x34, 0x36, 0xaa, 0x6a, 0x1f, 0x3c, 0x64, 0x17,
	0x7d, 0x0f, 0xb6, 0x41, 0x85, 0x7e, 0x1e, 0x92, 0x48, 0x95, 0xf1, 0x6c, 0x1a, 0x1b, 0x8f, 0xd5,
	0x5b, 0x89, 0x19, 0xd9, 0xd2, 0x0d, 0x0f, 0xc0, 0x33, 0x59, 0x7e, 0x37, 0x22, 0x81, 0xe3, 0x87,
	0x7e, 0xd8, 0x57, 0xd2, 0x7d, 0x65, 0x1a, 0x1b, 0x2b, 0xf9, 0x4e, 0x65, 0x11, 0xc8, 0x7e, 0x2a,
	0x4d, 0x76, 0x6a, 0x81, 0x07, 0xe0, 0xa9, 0x3b, 0xf0, 0x49, 0xc8, 0xbb, 0xa2, 0x84, 0xae, 0xef,
	0x29, 0x85, 0xea, 0xea, 0xa2, 0xd4, 0x25, 0xd4, 0xad, 0x20, 0x64, 0x3f, 0x91, 0x16, 0x51, 0xe2,
	0xa1, 0x07, 0x8f, 0x41, 0x45, 0xea, 0xbb, 0x22, 0xb2, 0xdf, 0x4d, 0xfa, 0xf4, 0xaf, 0x34, 0xae,
	0xaa, 0x54, 0xf2, 0x96, 0x60, 0xb2, 0x9f, 0x3b, 0x3f, 0x96, 0x40, 0x45, 0xf4, 0x13, 0x7e, 0xa5,
	0x81, 0xea, 0xec, 0x42, 0xc2, 0xb5, 0x05, 0xe3, 0xba, 0x7d, 0x86, 0x9b, 0xeb, 0xf7, 0x07, 0xc9,
	0xd9, 0xa0, 0xad, 0x2f, 0x7f, 0xfe, 0xf3, 0x9b, 0x62, 0x1b, 0xae, 0x63, 0xb2, 0x1d, 0xd0, 0x90,
	0x8c, 0x73, 0xe7, 0xde, 0x91, 0xb1, 0xf8, 0x5c, 0xdd, 0xea, 0x8b, 0x84, 0x46, 0x2d, 0x77, 0xeb,
	0xe0, 0xc6, 0x43, 0xb7, 0x50, 0x52, 0x69, 0xff, 0xb3, 0x93, 0x89, 0xda, 0x82, 0x4c, 0x0b, 0xea,
	0x0b, 0xc8, 0xe4, 0x2e, 0x25, 0xfc, 0x56, 0x03, 0x20, 0xcb, 0x87, 0xeb, 0xf7, 0xc2, 0xa7, 0x24,
	0x36, 0x1e, 0x88, 0x52, 0x1c, 0xde, 0x11, 0x1c, 0xde, 0x82, 0x6f, 0xde, 0xcb, 0x01, 0x9f, 0x4b,
	0x3d, 0x5d, 0xe0, 0xf3, 0xdc, 0x5e, 0x5d, 0x58, 0xfb, 0x57, 0x13, 0x5d, 0xbb, 0x9e, 0xe8, 0xda,
	0x1f, 0x13, 0x5d, 0xbb, 0xbc, 0xd1, 0x0b, 0xd7, 0x37, 0x7a, 0xe1, 0xd7, 0x1b, 0xbd, 0xf0, 0xf1,
	0xeb, 0x39, 0x41, 0xa4, 0xc8, 0x24, 0xd8, 0x1e, 0x10, 0xaf, 0x4f, 0x22, 0xfc, 0x45, 0xfa, 0x8a,
	0x50, 0x46, 0x6f, 0x49, 0x1c, 0xaf, 0x37, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x62, 0xd7, 0xb4,
	0xcb, 0x1c, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	ByAccount(ctx context.Context, in *QueryByAccountRequest, opts ...grpc.CallOption) (*QueryByAccountResponse, error)
	Instruments(ctx context.Context, in *QueryInstrumentsRequest, opts ...grpc.CallOption) (*QueryInstrumentsResponse, error)
	Instrument(ctx context.Context, in *QueryInstrumentRequest, opts ...grpc.CallOption) (*QueryInstrumentResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ByAccount(ctx context.Context, in *QueryByAccountRequest, opts ...grpc.CallOption) (*QueryByAccountResponse, error) {
	out := new(QueryByAccountResponse)
	err := c.cc.Invoke(ctx, "/em.market.v1.Query/ByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Instruments(ctx context.Context, in *QueryInstrumentsRequest, opts ...grpc.CallOption) (*QueryInstrumentsResponse, error) {
	out := new(QueryInstrumentsResponse)
	err := c.cc.Invoke(ctx, "/em.market.v1.Query/Instruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Instrument(ctx context.Context, in *QueryInstrumentRequest, opts ...grpc.CallOption) (*QueryInstrumentResponse, error) {
	out := new(QueryInstrumentResponse)
	err := c.cc.Invoke(ctx, "/em.market.v1.Query/Instrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	ByAccount(context.Context, *QueryByAccountRequest) (*QueryByAccountResponse, error)
	Instruments(context.Context, *QueryInstrumentsRequest) (*QueryInstrumentsResponse, error)
	Instrument(context.Context, *QueryInstrumentRequest) (*QueryInstrumentResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ByAccount(ctx context.Context, req *QueryByAccountRequest) (*QueryByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByAccount not implemented")
}
func (*UnimplementedQueryServer) Instruments(ctx context.Context, req *QueryInstrumentsRequest) (*QueryInstrumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Instruments not implemented")
}
func (*UnimplementedQueryServer) Instrument(ctx context.Context, req *QueryInstrumentRequest) (*QueryInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Instrument not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.market.v1.Query/ByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ByAccount(ctx, req.(*QueryByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Instruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Instruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.market.v1.Query/Instruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Instruments(ctx, req.(*QueryInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Instrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Instrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.market.v1.Query/Instrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Instrument(ctx, req.(*QueryInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "em.market.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ByAccount",
			Handler:    _Query_ByAccount_Handler,
		},
		{
			MethodName: "Instruments",
			Handler:    _Query_Instruments_Handler,
		},
		{
			MethodName: "Instrument",
			Handler:    _Query_Instrument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "em/market/v1/query.proto",
}

func (m *QueryByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryByAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryByAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryByAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInstrumentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInstrumentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInstrumentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInstrumentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInstrumentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInstrumentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instruments) > 0 {
		for iNdEx := len(m.Instruments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instruments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInstrumentsResponse_Element) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInstrumentsResponse_Element) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInstrumentsResponse_Element) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastTraded != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastTraded, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastTraded):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintQuery(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x2a
	}
	if m.BestPrice != nil {
		{
			size := m.BestPrice.Size()
			i -= size
			if _, err := m.BestPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastPrice != nil {
		{
			size := m.LastPrice.Size()
			i -= size
			if _, err := m.LastPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInstrumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInstrumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInstrumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInstrumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInstrumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInstrumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ClientOrderId) > 0 {
		i -= len(m.ClientOrderId)
		copy(dAtA[i:], m.ClientOrderId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClientOrderId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceRemaining) > 0 {
		i -= len(m.SourceRemaining)
		copy(dAtA[i:], m.SourceRemaining)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceRemaining)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryByAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryInstrumentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInstrumentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Instruments) > 0 {
		for _, e := range m.Instruments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryInstrumentsResponse_Element) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LastPrice != nil {
		l = m.LastPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BestPrice != nil {
		l = m.BestPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LastTraded != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastTraded)
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInstrumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInstrumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovQuery(uint64(m.ID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceRemaining)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ClientOrderId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryByAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryByAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryByAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInstrumentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInstrumentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInstrumentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInstrumentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInstrumentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInstrumentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instruments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instruments = append(m.Instruments, QueryInstrumentsResponse_Element{})
			if err := m.Instruments[len(m.Instruments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInstrumentsResponse_Element) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Element: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Element: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.LastPrice = &v
			if err := m.LastPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.BestPrice = &v
			if err := m.BestPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTraded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTraded == nil {
				m.LastTraded = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastTraded, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInstrumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInstrumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInstrumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInstrumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInstrumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInstrumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, QueryOrderResponse{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceRemaining = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
