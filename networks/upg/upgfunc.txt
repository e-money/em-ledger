// beginning of test upg handler insertion
	{
		/*
		 * This is a test v44 handler
		 */
		const upg44Plan = "v44-upg-test"

		app.upgradeKeeper.SetUpgradeHandler(
			upg44Plan,
			func(ctx sdk.Context, _ upgradetypes.Plan, _ module.VersionMap) (module.VersionMap, error) {
				app.ibcKeeper.ConnectionKeeper.SetParams(ctx, ibcconnectiontypes.DefaultParams())

				fromVM := make(map[string]uint64)
				for moduleName := range app.mm.Modules {
					// v40 state is version 1
					// v43 state is version 2
					// V43: em-ledger modules with state migration should set consensus version to 2
					// v45 state is likely v3
					fromVM[moduleName] = 1
				}

				// override versions for _new_ modules as to not skip InitGenesis
				fromVM[authz.ModuleName] = 0
				fromVM[feegrant.ModuleName] = 0

				ctx.Logger().Info("Upgrading to " + upg44Plan)

				return app.mm.RunMigrations(ctx, app.configurator, fromVM)
			},
		)

		upgradeInfo, err := app.upgradeKeeper.ReadUpgradeInfoFromDisk()
		if err != nil {
			panic(fmt.Sprintf("failed to read upgrade info from disk %s", err))
		}

		if upgradeInfo.Name == upg44Plan && !app.upgradeKeeper.IsSkipHeight(upgradeInfo.Height) {
			storeUpgrades := store.StoreUpgrades{
				//Added: []string{authz.ModuleName, feegrant.ModuleName},
			}

			// configure store loader that checks if version == upgradeHeight and applies store upgrades
			app.SetStoreLoader(upgradetypes.UpgradeStoreLoader(upgradeInfo.Height, &storeUpgrades))
		}
	}
// end of insert